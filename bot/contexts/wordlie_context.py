from aiogram import Router
from gameControll.game import game
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.keyboards.reply_keyboard import choose_game_or_else
from gameControll.game import game
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.inline_keyboard import choose_game
from bot.logger import cl
from bot.texts import create_user_name

router = Router()
@router.message(game.state)
async def step_in_the_game(message: Message, state:FSMContext):
      a:dict[str, str] = await state.get_data()
      if a["state"] in ["in_game_wordlie", "f_in_game_wordlie"]:
            m:str = message.text.lower()
            if not await game.wordlie.check_word_for_russian(m):
                  await message.answer("–≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤")
                  cl.custom_logger.info(
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–æ—Ä–¥–ª–∏ –≤–≤–µ–ª —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤",
                        extra={"username": message.from_user.username,
                        "state": await state.get_data(),
                        "handler_name": "step_in_the_game",
                        "params":{"word": m}}
                        )
            elif len(m)!=5:
                  await message.answer("–≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ, —Å–æ–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ 5 –±—É–∫–≤")
                  cl.custom_logger.info(
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–æ—Ä–¥–ª–∏ –≤–≤–µ–ª —Å–ª–æ–≤–æ –¥–ª–∏–Ω–Ω–µ–µ 5 –±—É–∫–≤",
                        extra={"username": message.from_user.username,
                        "state": await state.get_data(),
                        "handler_name": "step_in_the_game",
                        "params":{"word": m}}
                        )
            elif not await game.wordlie.check_word_available(m):
                  await message.answer("—è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
                  cl.custom_logger.info(
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–æ—Ä–¥–ª–∏ –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ",
                        extra={"username": message.from_user.username,
                        "state": await state.get_data(),
                        "handler_name": "step_in_the_game",
                        "params":{"word": m}}
                        )
            else:
                  answer, _ = await game.wordlie.check_correct_word(
                        m,
                        message.from_user.id,
                        not a["state"].startswith("f")
                  )         
                  if _ != None:
                        if a["state"].startswith("f"):
                              await message.answer(answer)
                              sender = game.wordlie.rooms[message.from_user.id]["sender"]
                              if _:
                                    text = (f"üò¢ –£–≤—ã, @{message.from_user.username} –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. üòû\n\n"+ 
                                         f"üî§ –°–ª–æ–≤–æ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ: [{game.wordlie.rooms[message.from_user.id]["word"]}] üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n"+ 
                                          f"–ü–æ–ø—ã—Ç–æ–∫ –±—ã–ª–æ: ü§Ø {game.wordlie.rooms[message.from_user.id]["attempts"]}")
                                    cl.custom_logger.info(
                                          f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –æ—Ç –¥—Ä—É–≥–∞",
                                          extra={"username": message.from_user.username,
                                          "state": await state.get_data(),
                                          "handler_name": "step_in_the_game",
                                          "params":{"word": answer}}
                                    )
                              else:
                                    text = (f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ @{message.from_user.username} –Ω–µ –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ! ü•≥\n\n"+
                                                f"üî§ –°–ª–æ–≤–æ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ: [{game.wordlie.rooms[message.from_user.id]["word"]}]üïµÔ∏è‚Äç‚ôÇÔ∏è")
                                    cl.custom_logger.info(
                                          f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –æ—Ç –¥—Ä—É–≥–∞",
                                          extra={"username": message.from_user.username,
                                          "state": await state.get_data(),
                                          "handler_name": "step_in_the_game",
                                          "params":{"word": answer}}
                                    )
                              await message.bot.send_message(
                                     chat_id=sender,
                                     text=text     
                                    )
                        else:
                              await message.answer(answer,
                                          reply_markup=InlineKeyboardMarkup(
                                                inline_keyboard=[[InlineKeyboardButton(
                                                      text="—Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑",
                                                      callback_data="game_alone_"
                                                )]]
                                          ))
                              cl.custom_logger.info(
                                          f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –∏–≥—Ä—É –≤ –≤–æ—Ä–¥–ª–∏",
                                          extra={"username": message.from_user.username,
                                          "state": await state.get_data(),
                                          "handler_name": "step_in_the_game",
                                          "params":{"word": answer}}
                                    )
                        await state.clear()
                        del game.wordlie.rooms[message.from_user.id]
                  else:
                        await message.answer(answer)
                        cl.custom_logger.info(
                                          f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ",
                                          extra={"username": message.from_user.username,
                                          "state": await state.get_data(),
                                          "handler_name": "game_wordlie_from_friend",
                                          "params":{"word": answer}}
                                    )

                  
            
      else:
            await message.answer("—è —Ö–∑ –∫–∞–∫ —Ç—ã —Å—é–¥–∞ –ø–æ–ø–∞–ª")

@router.message(game.wordlie.send_word)
async def check_word(message: Message, state: FSMContext,user):
      if message.text == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("–¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=choose_game_or_else)
            await message.delete()
            await message.answer("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å",
                       reply_markup=choose_game)
            return       
      try:
            userr, word = message.text.split(" ")
      except:
            await message.answer("–≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      else:
            if userr == message.from_user.username:
                  await message.answer("–Ω–µ–ª—å–∑—è –∑–∞–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ —Å–∞–º–æ–º—É —Å–µ–±–µ")
            else:
                  users = await game.wordlie.get_user_by_name(userr)
                  print(users)
                  # print(await message.bot.get_chat(f"@{message.from_user.username}"))
                  await game.wordlie.create_alone_game(users, word, message.from_user.id)
                  try:
                        await message.bot.send_message(
                        chat_id=users,
                        text=f"{create_user_name(user)} –±—Ä–æ—Å–∏–ª —Ç–µ–±–µ –≤—ã–∑–æ–≤ –≤ wordle",
                        reply_markup=InlineKeyboardMarkup(
                              inline_keyboard=[[
                                    InlineKeyboardButton(text="–ø—Ä–æ–π—Ç–∏", callback_data="wordlie_from_friend"),
                                    InlineKeyboardButton(text="–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="wordlie_diss")
                              ]]
                        ),
                        parse_mode="HTML"
                  )
                  except:
                        await message.answer("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –±—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–º—É –≤—ã–∑–æ–≤")
                  else:
                        await message.answer(f"–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É @{userr}", reply_markup=choose_game_or_else)
                        await state.clear()

    